<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<link rel="stylesheet" href="c/s.css" type="text/css">
<title>outspoken</title>
  <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.3.1/leaflet.css" />
</head>
<body>
<script src="http://cdn.leafletjs.com/leaflet-0.3.1/leaflet.js"></script>
<div id="outside-border">
<div id="header"><a href="index.html"><img src="i/logo.png" /></a>
<div id="topnav">
<ul>
<a href="report.html"><li>Make a Report</li></a>
<a href="view.html"><li>Map</li></a>
<a href="http://bicycle-sadness.tumblr.com/" target="_blank"><li>Blog</li></a>
<li>About Us</li>
</ul>
</div><!-- /topnav -->
</div>
<div id="container">
	<div id="left">
		<div id="mapoverlay">
			<p class="home">OutSpoken is crowd-sourced cycling information for the masses. Cyclists contribute, cyclists benefit. When you spot a problem or experience an accident or near miss, report it so that we can build up more information for cyclists. Before you set out on a new route, check the route you plan to take.</p>
		</div><!-- map overlay -->
			<div id="actionbuttons">
				<ul id="homemenu">
				<li><a href="report.html"><img src="i/report_btn.png" />Make a Report</a></li>
				<li><a href="view.html"><img src="i/map_btn.png" />Map</a></li>
				<li><a href="http://bicycle-sadness.tumblr.com/" target="_blank"><img src="i/blog_btn.png" />Blog</a></li>
				<li><img src="i/about_btn.png" />About</li>
			</ul>
			</div><!-- /actionbuttons -->
		<div id="map"></div>
	</div><!-- /left -->

	<div id="right">
		<div id="stream">


<script charset="utf-8" src="http://widgets.twimg.com/j/2/widget.js"></script>
<script>
new TWTR.Widget({
  version: 2,
  type: 'profile',
  rpp: 3,
  interval: 30000,
  width: 190,
  height: 100,
  theme: {
    shell: {
      background: '#333333',
      color: '#ffffff'
    },
    tweets: {
      background: '#000000',
      color: '#ffffff',
      links: '#cccccc'
    }
  },
  features: {
    scrollbar: false,
    loop: false,
    live: false,
    behavior: 'all'
  }
}).render().setUser('OutSpokenBikes').start();
</script>



		</div><!- /stream -->

		<div id="appwidgets">
		<img src="i/apple.png" />
		<img src="i/android.png" />
		</div><!-- /appwidgets -->
	</div><!-- /right -->
</div><!-- container -->
<div id="footer"></div>
</div><!-- /outside-border -->
<script type="text/javascript" src="http://tile.cloudmade.com/wml/latest/web-maps-lite.js"></script>

  <script> <!-- you were right, we need to modify, but should be simple :)-->

<!-- simple1: http://leaflet.cloudmade.com/examples/quick-start.html-->

<!-- tutorial commands to create "disp" folder, will push it too-->

        var cloudmade = new L.TileLayer('http://{s}.tile.cloudmade.com/4a7ecbf54cd74519a944efa10e330c2e/997/256/{z}/{x}/{y}.png', {

    attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="http://cloudmade.com">CloudMade</a>',

    maxZoom: 18

});

<!-- advanced stuff for the layers, funky-->

var cloudmadeUrl = 'http://{s}.tile.cloudmade.com/4a7ecbf54cd74519a944efa10e330c2e/{styleId}/256/{z}/{x}/{y}.png',

    cloudmadeAttribution = 'OutSpoken, Dublin, 2012',

    cloudmadeOptions = {maxZoom: 18, attribution: cloudmadeAttribution};

var minimal = new L.TileLayer(cloudmadeUrl, cloudmadeOptions, {styleId: 22677}),

    midnightCommander = new L.TileLayer(cloudmadeUrl, cloudmadeOptions, {styleId: 999});


<!-- the fun begins, we create a new Layer for each cate., need to create this before we actually parse the markers-->

        var accidentsLayer = new L.LayerGroup();
        var theftLayer = new L.LayerGroup();
        var hazardLayer = new L.LayerGroup();

// Define the icons to be applied to the markers

var AccIcon = L.Icon.extend({
    iconUrl: 'dist/images/accident.png',
    shadowUrl: '../dist/images/marker-shadow.png',
    iconSize: new L.Point(30, 45),
   // shadowSize: new L.Point(30, 55),
    iconAnchor: new L.Point(22, 94),
    popupAnchor: new L.Point(-3, -76)

}); 

//!! Missing the instance creation:

var accIcon = new AccIcon();


var HazIcon = L.Icon.extend({

    iconUrl: 'dist/images/generalhazard.png',
    shadowUrl: 'dist/images/marker-shadow.png',
    iconSize: new L.Point(30, 45),
   // shadowSize: new L.Point(68, 95),
    iconAnchor: new L.Point(22, 94),
    popupAnchor: new L.Point(-3, -76)

});

 

//!! Missing the instance creation:

var hazIcon = new HazIcon();
var TheftIcon = L.Icon.extend({

    iconUrl: 'dist/images/clippers.png',
    shadowUrl: 'dist/images/marker-shadow.png',
    iconSize: new L.Point(30, 45),
   // shadowSize: new L.Point(30, 45),
    iconAnchor: new L.Point(22, 94),
    popupAnchor: new L.Point(-3, -76)

});

//!! Missing the instance creation:

var theftIcon = new TheftIcon();

var map = new L.Map('map', {

    center: new L.LatLng(53.3649, -6.218),
    zoom: 12,
    layers: [minimal, accidentsLayer,theftLayer,hazardLayer]

});


<!-- Adding the controls -->

var baseMaps = {
    "Minimal": minimal,
    "Night View": midnightCommander
}; 

var overlayMaps = {
    "Accidents": accidentsLayer,
    "Thefts": theftLayer,
    "Hazards": hazardLayer
};
 

var layersControl = new L.Control.Layers(baseMaps, overlayMaps);
map.addControl(layersControl);


<!-- modified the marker bit, swapped for L instead of CM.-->

     downloadUrl("display2.php", function(data)
     {

            var xml = data.responseXML;
            var accidents = xml.documentElement.getElementsByTagName("accident");
            for (var i = 0; i < accidents.length; i++)

            {

                var severity = accidents[i].getAttribute("severity");
                var vehicle = accidents[i].getAttribute("vehicle");
                var time = accidents[i].getAttribute("time");
                var date = accidents[i].getAttribute("date");
                var comment = accidents[i].getAttribute("comment");
                var cause = accidents[i].getAttribute("acc_cause");
                var point = new L.LatLng(
                    parseFloat(accidents[i].getAttribute("lat")),
                    parseFloat(accidents[i].getAttribute("lng")));
                var html = "<b>Severity: " +severity+ "</b> <br>Vehicle: " + vehicle + "<br>Date: " + date+ "<br>Time: " +time +"<br>Cause: "+cause+ "<br>Comment: ";             
                var marker = new L.Marker(point, {title: 'Accident', icon: accIcon});
                marker.bindPopup(html); //adding html information
                accidentsLayer.addLayer(marker);  //we add the marker to the layer, simple2                                
               }

            });

 

        map.addLayer(accidentsLayer); //insert the Layer Accidents into map.           
         

         downloadUrl("display_theft.php", function(data)

         {

            var xml = data.responseXML;

            var thefts = xml.documentElement.getElementsByTagName("theft");

            for (var i = 0; i < thefts.length; i++)

            {

                var date_left = thefts[i].getAttribute("date_left");
                var time_left = thefts[i].getAttribute("time_left");
                var found_date = thefts[i].getAttribute("found_date");
                var point = new L.LatLng(
                    parseFloat(thefts[i].getAttribute("lat")),
                    parseFloat(thefts[i].getAttribute("lng")));
                var html = date_left+ " " +found_date;
                var marker = new L.Marker(point,{title: 'Accident', icon: theftIcon});
                marker.bindPopup(html) //adding html information
                theftLayer.addLayer(marker);                                     
               }
            });
        
         map.addLayer(theftLayer);  

         downloadUrl("display_hazards.php", function(data)
         {
            var xml = data.responseXML;
            var hazards = xml.documentElement.getElementsByTagName("hazard");
            for (var i = 0; i < hazards.length; i++)
            {
                var date = hazards[i].getAttribute("date");
                var time = hazards[i].getAttribute("time");
                var explanation = hazards[i].getAttribute("explanation");               
                var point = new L.LatLng(
                    parseFloat(hazards[i].getAttribute("lat")),
                    parseFloat(hazards[i].getAttribute("lng")));                               
                var marker = new L.Marker(point, {icon: hazIcon});
                marker.bindPopup(explanation) //adding html information
                hazardLayer.addLayer(marker);                                    
               }
            });    

          map.addLayer(hazardLayer);  

      function downloadUrl(url,callback)
      {
        var request = window.ActiveXObject ?

          new ActiveXObject('Microsoft.XMLHTTP') :
          new XMLHttpRequest;

          request.onreadystatechange = function()
          {

            if (request.readyState == 4)

            {

                request.onreadystatechange = doNothing;

                callback(request, request.status);

            }

           };

           request.open('GET', url, true);

           request.send(null);

         } 

          function doNothing(){}
 

  </script>
   <!-- Validation Functions   -->
  <script src="js/validation_functions.js"></script>

</body>
</html>
